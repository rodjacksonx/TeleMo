<?php

/**
 * @file - telemo.module
 *
 * Enabling other telephony modules using any of a number of companies' API services.
 * Currently works with CallFire.com and Twilio.com
 *
 * @creation November 2012
 * @author Rod Jackson (RDJ)
 */
 
require_once("telemo.callfire_lib.php");
require_once("telemo.twilio_lib.php");
require_once("telemo.telemo_lib.php");
require_once("telemo.routines.inc");
require_once("telemo.notify.inc");

define('CALLFIRE_WEBSITE', "https://callfire.com");
define('TWILIO_WEBSITE', "https://twilio.com");

define('CALLFIRE_NOTIFY_URL', "telemo/callfire/notify");
define('TWILIO_NOTIFY_URL', "telemo/twilio/notify");

global $telemo_future_actions_db_lock;


/**
 * Settings form for the TeleMo module.
 */
function telemo_settings_form() {

	//global $base_url;

	$form = array();

	/*$form['telemo_base_url'] = array(
		'#type' => 'textfield',
		'#title' => t('Store website base URL'),
		'#default_value' => variable_get('telemo_base_url', $base_url),
    '#summary' => t('Store website base URL is currently set as: <br /> %url', array('%url' => variable_get('telemo_base_url', $base_url))),
		'#description' =>
			t("Base URL of the website. It is presented here primarily to allow admins to force the use of the 'https' version of their website if it doesn't automatically use it. TeleMo requires that the website use SSL to receive notifications from telephony service provider(s), so please add the 's' to 'http' if needed. For reference, the website's internal base URL is normally: ") . '<b>' . $base_url . '</b>',
	);*/
  $form['telemo_general_settings'] = array(
		'#type' => 'fieldset',
    '#title' => t('TeleMo general settings'),
		'#collapsible' => FALSE,
		'#collapsed' => FALSE,
  );
	$form['telemo_general_settings']['telemo_debug_mode'] = array(
    '#type' => 'checkbox',
		'#title' => t("Debug mode (only admins will be able to make use of TeleMo's features.)"),
    '#summary callback' => 'summarize_checkbox',
    '#summary arguments' => array(t('TeleMo is in debug mode.'), t('TeleMo is in normal mode.')),
    '#default_value' => variable_get('telemo_debug_mode', FALSE),
	);
	$form['telemo_general_settings']['telemo_force_https'] = array(
	  '#type' => 'checkbox',
		'#title' => t("Force usage of HTTPS version of website (to use SSL.)"),
    '#summary callback' => 'summarize_checkbox',
    '#summary arguments' => array(t('TeleMo is forcing use of HTTPS.'), t('TeleMo is allowing site to use HTTP or HTTPS.')),
    '#default_value' => variable_get('telemo_force_https', FALSE),
	);
  $form['telemo_callfire_settings'] = array(
		'#type' => 'fieldset',
    '#title' => t('CallFire settings'),
		'#collapsible' => FALSE,
		'#collapsed' => FALSE,
  );
	$form['telemo_callfire_settings']['telemo_callfire_enabled'] = array(
    '#type' => 'checkbox',
		'#title' => 'Enable CallFire access',
    '#summary callback' => 'summarize_checkbox',
    '#summary arguments' => array(t('CallFire access is enabled.'), t('CallFire access is disabled.')),
    '#default_value' => variable_get('telemo_callfire_enabled', FALSE),
	);
	$form['telemo_callfire_settings']['telemo_callfire_login'] = array(
		'#type' => 'textfield',
		'#title' => t('CallFire login'),
		'#default_value' => variable_get('telemo_callfire_login', ''),
    '#summary' => t('CallFire login is currently set as: %login', array('%login' => variable_get('telemo_callfire_login', ''))),
		'#description' => t('The app login provided by CallFire. This is required to use any CallFire services.'),
	);
	$form['telemo_callfire_settings']['telemo_callfire_password'] = array(
		'#type' => 'textfield',
		'#title' => t('CallFire password'),
		'#default_value' => variable_get('telemo_callfire_password', ''),
    '#summary' => t('CallFire password is currently set as: %password', array('%password' => variable_get('telemo_callfire_password', ''))),
		'#description' => t('The app password provided by CallFire. This is required to use any CallFire services.'),
	);
	$form['telemo_callfire_settings']['telemo_callfire_default_from_num'] = array(
		'#type' => 'textfield',
		'#title' => t('"From" phone number'),
		'#default_value' => variable_get('telemo_callfire_default_from_num', ''),
    '#summary' => t('Default CallFire "from" phone number is currently set as: %from', array('%from' => variable_get('telemo_callfire_default_from_num', ''))),
		'#description' =>
			t("The default phone number to use as the 'sent from' number on CallFire telephony communications. This should be a phone number you have on record with CallFire. Feel free to add dashes or whatever formatting you like; non-digits will be stripped before the number is used."),
	);
  $form['telemo_twilio_settings'] = array(
		'#type' => 'fieldset',
    '#title' => t('Twilio settings'),
		'#collapsible' => FALSE,
		'#collapsed' => FALSE,
  );
	$form['telemo_twilio_settings']['telemo_twilio_enabled'] = array(
    '#type' => 'checkbox',
		'#title' => 'Enable Twilio access',
    '#summary callback' => 'summarize_checkbox',
    '#summary arguments' => array(t('Twilio access is enabled.'), t('Twilio access is disabled.')),
    '#default_value' => variable_get('telemo_twilio_enabled', FALSE),
	);
	$form['telemo_twilio_settings']['telemo_twilio_account_sid'] = array(
		'#type' => 'textfield',
		'#title' => t('Twilio account SID'),
		'#default_value' => variable_get('telemo_twilio_account_sid', ''),
    '#summary' => t('Twilio account SID is currently set as: %sid', array('%sid' => variable_get('telemo_twilio_account_sid', ''))),
		'#description' => t('The account SID provided by Twilio. This is required to use any Twilio services.'),
	);
	$form['telemo_twilio_settings']['telemo_twilio_auth_token'] = array(
		'#type' => 'textfield',
		'#title' => t('Twilio authentication token'),
		'#default_value' => variable_get('telemo_twilio_auth_token', ''),
    '#summary' => t('Twilio authentication token is currently set as: %token', array('%token' => variable_get('telemo_twilio_auth_token', ''))),
		'#description' => t('The authentication token provided by Twilio. This is required to use any Twilio services.'),
	);
	$form['telemo_twilio_settings']['telemo_twilio_default_from_num'] = array(
		'#type' => 'textfield',
		'#title' => t('"From" phone number'),
		'#default_value' => variable_get('telemo_twilio_default_from_num', ''),
    '#summary' => t('Default Twilio "from" phone number is currently set as: %from', array('%from' => variable_get('telemo_twilio_default_from_num', ''))),
		'#description' =>
			t("The default phone number to use as the 'sent from' number on Twilio telephony communications. This should be a phone number you ALREADY have on record with Twilio. Feel free to add dashes or whatever formatting you like; non-digits will be stripped before the number is used."),
	);

	return system_settings_form($form);
	
} // end function - telemo_settings_form


/**
 * Validate TeleMo settings.
 */
function telemo_settings_form_validate($form, &$form_state) {

	global $base_url;
	
	// if demanded, check that https is used, not just http
	$url = $base_url;
	$https_is_demanded = $form_state['values']['telemo_force_https'];
	if ($https_is_demanded) {
		$https_pos = strpos($url, 'https://');
		if ($https_pos === FALSE) {
			$http_pos = strpos($url, 'http://');
			if ($http_pos === FALSE) {
				$url = 'https://' . $url;
			}
			else {
				$url = substr_replace($url, 'https:', $http_pos, 5); // replace 'http:' with 'https:'
			}
		}
	}
	
	// for CALLFIRE, if used, setup for postbacks
	$callfire_login = $form_state['values']['telemo_callfire_login'];
	$callfire_password = $form_state['values']['telemo_callfire_password'];
	$callfire_is_enabled = $form_state['values']['telemo_callfire_enabled'];
	if ($callfire_is_enabled && ($callfire_login != '') && ($callfire_password != '')) {
		variable_set('telemo_callfire_login', $callfire_login);
		variable_set('telemo_callfire_password', $callfire_password);
		// get all CallFire postback subscriptions
		$subscriptions = telemo_cfGetSubscriptions();
		// remove previous subscriptions, in case any no-longer-accessed ones are present
		if ($subscriptions) {
			foreach ($subscriptions as $subscription) {
				$id = $subscription->id;
				if ($id) {
					$response = telemo_cfPostbackUnsubscribe($id); //$client->deleteSubscription($delete_request);
				}
			}
		}
		// create a new subscription
		$notify_url = $url . '/' . CALLFIRE_NOTIFY_URL;
		$response = telemo_cfPostbackSubscribe($notify_url);
	} // end check to see if using CallFire

	// for TWILIO, if used, alert the system to our application
	$twilio_acct_sid = $form_state['values']['telemo_twilio_account_sid'];
	$twilio_auth_token = $form_state['values']['telemo_twilio_auth_token'];
	$twiliio_is_enabled = $form_state['values']['telemo_twilio_enabled'];
	if ($twilio_is_enabled && ($twilio_acct_sid != '') && ($twilio_auth_token != '')) {
		variable_set('telemo_twilio_account_sid', $twilio_acct_sid);
		variable_set('telemo_twilio_auth_token', $twilio_auth_token);
		// check for previous applications registered with Twilio
		$client = new Services_Twilio($twilio_acct_sid, $twilio_auth_token);
		$application = FALSE;
		$params = array('FriendlyName' => 'TeleMo App');
		foreach ($client->account->applications->getIterator(0, 1, $params) as $app) {
			$application = $app;
			break;
		}
		// if we found one, delete it
		if ($application) {
			$client->account->applications->delete($application->sid);
		}
		// create this application (anew, if needed) and
		// assign it's SID to all your account's numbers
		$application = $client->account->applications->create('TeleMo App', array(
			'FriendlyName' => 'TeleMo App',
			'SmsUrl' => $url . '/' . TWILIO_NOTIFY_URL,
			'SmsMethod' => 'POST'
		));
		$numbers = $client->account->incoming_phone_numbers;
		foreach ($numbers as $number) {
			$number->update(array('SmsApplicationSid' => $application->sid));
		}
	} // end check to see if we're using Twilio
	
} // end function - telemo_settings_form_validate


/**
 * Display help and module information
 * @param path which path of the site we're displaying help
 * @param arg array that holds the current path as would be returned from arg() function
 * @return help text for the path
 */
function telemo_help($path, $arg) {
	$o = '';  // declare your output variable
	switch ($path) {
		case "admin/help#telemo":
			$o .= '<p>'. 
				t('Enables the use of other service-specific TeleMo modules.') .'</p>';
			break;
	}
	return $o;
}


/**
 * Implements hook_menu().
 */
function telemo_menu() {

	$items = array();
	
	// Always accessible, accepts POST data from CallFire's
	// servers when being sent a postback.
	$items[CALLFIRE_NOTIFY_URL] = array(
		'title' => 'CallFire Notifications',
		'access callback' => TRUE,
		'page callback' => 'telemo_callfire_notification',
		'type' => MENU_CALLBACK,
		'file' => 'telemo.notify.inc',
	);

	// Always accessible, accepts POST data from Twilio's
	// servers when being sent a notification.
	$items[TWILIO_NOTIFY_URL] = array(
		'title' => 'Twilio Notifications',
		'access callback' => TRUE,
		'page callback' => 'telemo_twilio_notification',
		'type' => MENU_CALLBACK,
		'file' => 'telemo.notify.inc',
	);

	// parent settings menu
	$items['admin/settings/telemo'] = array(
		'title' => t('TeleMo'),
		'description' => t('Basic settings of the TeleMo module, and individual enabling of services.'),
		'page callback' => 'telemo_settings_overview',
		'access arguments' => array('access administration pages'),
		'type' => MENU_NORMAL_ITEM,
	);

	// overview page for the settings (the default)
  $items['admin/settings/telemo/overview'] = array(
    'title' => 'Overview',
    'description' => 'View the general TeleMo settings.',
		'page callback' => 'telemo_settings_overview',
    'access arguments' => array('access administration pages'),
    'weight' => -10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  
  // page to edit the settings
  $items['admin/settings/telemo/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit the general TeleMo settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('telemo_settings_form'),
    'access arguments' => array('access administration pages'),
    'weight' => -5,
    'type' => MENU_LOCAL_TASK,
  );
  
  // page to display and adjust the settings for the services & their features
  $items['admin/settings/telemo/services'] = array(
    'title' => 'Services',
    'description' => 'Enable and disable TeleMo services and their features.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array ('telemo_services_form'),
    'access arguments' => array('access administration pages'),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
  );

	return $items;
	
} // end function - telemo_menu


/**
 * Displays an overview of the TeleMo settings.
 */
function telemo_settings_overview() {
  // Theme all the pages beneath this path into summary overviews.
  return theme('summary_overview', summarize_child_form_pages('admin/settings/telemo'));
}


/**
 * Displays the TeleMo service modules, both to allow
 * enabling and to allow modifying their settings.
 */
function telemo_services_form() {

  $services = _telemo_all_services('rebuild');

  $form['services_info'] = array(
    '#value' => '<div><strong>'. t('TeleMo services') .'</strong><br />'
              . t('The settings forms below are for the various TeleMo services defined by enabled modules. Click a name to expand its options and adjust the settings accordingly.') .'</div><br />',
  );

  $form['telemo_service_table'] = array(
    '#theme' => 'telemo_services_table',
    '#summary callback' => 'summarize_form',
  );

  if (is_array($services) && count($services) > 0) {
    foreach ($services as $service) {

			$service_id = $service['id'];
			$service_name = $service['name'];
			
			$service_enabled = 'tm_' . $service_id . '_enabled';
			
      $form['telemo_service_table'][$service_id]['#summary callback'] = 'summarize_form';

      $form['telemo_service_table'][$service_id][$service_enabled] = array(
        '#type' => 'checkbox',
				'#title' => '<b>' . $service_name . ':</b> ' . $service['desc'],
        '#summary callback' => 'summarize_checkbox',
        '#summary arguments' => array(
          t('@service service is enabled.', array('@service' => $service_name)),
          t('@service service is disabled.', array('@service' => $service_name)),
        ),
        '#default_value' => variable_get($service_enabled, FALSE),
      );

      $service_settings = $service['callback']();
      if (is_array($service_settings) && (count($service_settings) > 0)) {
        $form['service_'. $service_id] = array(
          '#type' => 'fieldset',
          '#summary callback' => 'summarize_null',
          '#title' => t('!service settings', array('!service' => $service_name)),
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
        );
        $form['service_'. $service_id] = array_merge($form['service_'. $service_id], $service_settings);
      }
    }
  }
	else {
		// no services found; let the admin know this
		$form['telemo_no_services'] = array(
      '#type' => 'item',
      '#summary callback' => 'summarize_element',
      '#summary' => '<b>No TeleMo service modules appear to be loaded.</b>',
			'#description' => t('You will need to enable one or more TeleMo service modules (such as TeleMo SMS) to make use of the TeleMo module.') . '<br /><br />',
      '#value' => '<b>ATTENTION: No TeleMo service modules appear to be loaded.</b>',
    );

		// return early, no need to add standard buttons to the form
		return $form;
	}

  return system_settings_form($form);
} // end function - telemo_services_form


/**
 * Theme the TeleMo services form
 */
function theme_telemo_services_table($form) {
  $header = array(t('Enabled'), t('Service'));

  foreach (element_children($form) as $service) {
    $rows[] = array(
      array('data' => drupal_render($form[$service]['telemo_service_'. $service]), 'align' => 'center'),
      drupal_render($form[$service]['name']),
    );
  }

  if (empty($rows)) {
    $rows[] = array(
      array('data' => t('No enabled TeleMo service modules founds.'), 'colspan' => 3),
    );
  }

  return theme('table', $header, $rows);
}

/******************************************************/

/**
 * Implementation of hook_user().
 *
 * Enables the 'signup features' that are available in some TeleMo extending modules.
 * This particular function allows the user to view and edit their participation in
 * this features on their user account page.
 *
 */
function telemo_user($type, $edit, &$user, $category = NULL) {

	// if TeleMo is only debug-mode enabled, and this isn't an admin, skip out
	if (variable_get('telemo_debug_mode', FALSE) && !user_access('access administration menu')) {
		return;
	}

	// get user ID
	$user_id = $user->uid;
	if ($user_id <= 0) {
		return;
	}

	// if this isn't someone looking at their own profile, or an admin, skip out
  if (!($GLOBALS['user']->uid == $user_id) && !user_access('administer users')) {
  	return;
  }
	
	switch ($type) {
	
		case 'form':
		
			$data = db_fetch_array(db_query("SELECT mobile_num, signups FROM {telemo_users} WHERE id = %d", $user_id));
			if ($data === FALSE) {
				$mobile_num = '';
				$user_signups = '';
				db_query("INSERT INTO {telemo_users} (id, mobile_num, signups, creation, groupings, last_action_time, last_action_event) VALUES (%d, '', '', %d, '', 0, '')", $user_id, time());
			}
			else {
				$record = $data;
				$user_signups = $record['signups'];
				$mobile_num = $record['mobile_num'];
			}
			
			$enabled_services = _telemo_all_enabled_services();
			
  		if ($category == 'account') {
  		
  			$form['telemo_user_id_passthru'] = array( // CAREFUL!!!!! changed to '_user_id_', from '_user_'!
  				'#type' => 'hidden',
  				'#value' => $user_id
  			);

				$form['telemo_user_settings'] = array(
					'#type' => 'fieldset',
					'#title' => 'Telephony settings',
					'#collapsible' => FALSE,
					'#collapsed' => FALSE,
				);
				
    		$form['telemo_user_settings']['telemo_mobile_num'] = array(
					'#type' => 'textfield',
					'#title' => t('Mobile number'),
					'#default_value' => _telemo_display_mobile_num($mobile_num),
					'#summary' => t('Mobile number for receiving telephony services: ') . $mobile_num,
					'#description' => t("Number where text messages and other telephony services should be directed."),
				);
    
				// loop through all enabled services
				foreach ($enabled_services as $service) {
				
					// add a fieldset on the form for the opt-in features of this service
					$service_id = $service['id'];
					$fieldset_name = 'tm_' . $service_id . '_user_signups';
		  		$form['telemo_user_settings'][$fieldset_name] = array(
			      '#type' => 'fieldset',
  	  		  '#title' => $service['name'],
		  	    '#collapsible' => TRUE,
		    	  '#collapsed' => FALSE,
    			);

					$service_prompt = 'tm_' . $service_id . '_prompt';
					$form['telemo_user_settings'][$fieldset_name][$service_prompt] = $service['prompt'];
					
					$features = $service['features'];
					
					// loop through all features for this service
					foreach ($features as $feature) {
						// if an opt-in feature, and enabled, add a checkbox to the form to signup for it
						if (($feature['optin']) && ($feature['enabled'])) {
							$signup_name = 'tm_' . $service_id . '_feature_' . $feature['id'] . '_signedup';
							$feature_tag = ':' . $service_id . '~' . $feature['id'] . ';';
							$pos = strpos($user_signups, $feature_tag);
							$form['telemo_user_settings'][$fieldset_name][$signup_name] = array(
								'#type' => 'checkbox',
								'#title' => '<strong>' . $feature['name'] . ':</strong> ' . $feature['text'],
								'#default_value' => !($pos === FALSE),
							);
						}
					}
					
					// check to make sure at least one opt-in feature is
					// present; if not, remove the service from the form
					if (count($form['telemo_user_settings'][$fieldset_name]) <= 5) {
						unset ($form['telemo_user_settings'][$fieldset_name]);
					}
					
				} // end loop through all enabled services
				
				
		    return $form;
  		}
  
  		break;
  		
  	case 'view':

			// Do not show the options in the view page; since the TeleMo options
			// are not part of the user profile, it may be best to not touch this.
			break;
			
  }

}


/**
 * Alter various forms to enable SMS settings, features, etc.
 */
function telemo_form_alter(&$form, &$form_state, $form_id) {

	switch ($form_id) {
	
		// store the checked features on the user profile page into the DB
		case 'user_profile_form':
		
			$form['#submit'][] = 'telemo_user_settings_validate';
			break;
			
		// allow the user to signup during checkout if using Ubercart
		case 'uc_cart_checkout_form':
		
			$form['#submit'][] = 'telemo_user_settings_validate';
			break;
			
		// special case for the 'ship' feature, so it'll trigger on
		// a form submit (we know we will be designing this service;
		// we know we can just do this here.)
		case 'uc_order_view_update_form':
			
			$form['#submit'][] = 'tm_sms_feature_ship_check';
			break;
  }

}


/**
 * A validation routine for the user profile form, that takes their TeleMo
 * service settings and stores their opted-in features in the DB.
 */
function telemo_user_settings_validate($form, &$form_state) {

	// if TeleMo is only debug-mode enabled, and this isn't an admin, skip out
	if (variable_get('telemo_debug_mode', FALSE) && !user_access('access administration menu')) {
		return;
	}

	// get the user ID
	// first check to see if we're entering from Ubercart's checkout process
	if (isset($form_state['values']['panes'])) {
		$form_state_values = $form_state['values']['panes']['tm_sms']; // we know about this service
	}
	else {
		$form_state_values = $form_state['values'];
	}
	// NOW get the user ID
	$user_id = $form_state_values['telemo_user_id_passthru'];
	
	// if user ID is negative, we had a new user with no real user ID;
	// we still can't get anything except the order number right now, so
	// set the user ID to the negative of the order number for now
	if ($user_id <= 0) {
		$order_id = intval($_SESSION['cart_order']);
		$user_id = -$order_id;
	}

	// get the user's opt-in features list;
	// if no record found, create a new, blank one
	$record_found = TRUE;
	$signups = db_result(db_query("SELECT signups FROM {telemo_users} WHERE id = %d", $user_id));
	if ($signups === FALSE) {
		$signups = '';
		$record_found = FALSE;
	}
	
	// presume that an empty mobile number (no non-zero digits)
	// indicates the user is unsubscribing from all features
	$mobile_num = _telemo_extract_mobile_num($form_state_values['telemo_mobile_num']);
	if (_tm_mobile_num_is_empty($mobile_num)) {
		$signups = '';
		$mobile_num = '';
	}
	else {

		// loop through and check all form elements
		foreach ($form_state_values as $key => $form_element_value) {
	
			// determine if the form element is a TeleMo signup feature setting
			$terms = explode('_', $key); // looking for: array('tm', $service_id, 'feature', $feature_id, 'signedup')
			if (($terms[0] == 'tm') && ($terms[2] == 'feature') && ($terms[4] == 'signedup')) {
				$is_signup = TRUE;
				$service_id = $terms[1];
				$feature_id = $terms[3];
				$feature_is_signedup = !!$form_element_value;
			}
			else {
				$is_signup = FALSE;
			}
			
			// if so, we may need to update the user's features list
			if ($is_signup) {
				// check if the user is signed up for the feature
				$tagged_signup = ':' . $service_id . '~' . $feature_id . ';';
				$pos = strpos($signups, $tagged_signup);
		
				// if the feature is checked, but the user isn't signed up, make a change
				if ($feature_is_signedup && ($pos === FALSE)) {
					$signups .= $tagged_signup;
				}
				// if the feature isn't checked, but the user is signed up, make a change
				elseif ((!$feature_is_signedup) && ($pos !== FALSE)) {
					$signups = str_replace($tagged_signup, '', $signups);
				}
			}
		
		} // end foreach loop through all form elements
		
	} // end check for a blank mobile number
	
	// if they entered a 10-digit mobile number, add the obligatory '1' to the front
	if (strlen($mobile_num) == 10) {
		$mobile_num = '1' . $mobile_num;
	}
	
	// if they do not have a record yet...
	if (!$record_found) {
		// then see if they include a mobile number or at least one feature. If so...
		if (($mobile_num != '') || ($signups != '')) {
			// create a new record for the user
			db_query("INSERT INTO {telemo_users} (id, mobile_num, signups, creation, groupings, last_action_time, last_action_event) VALUES (%d, '%s', '%s', %d, '', 0, '')", $user_id, $mobile_num, $signups, time());
		}
		// otherwise don't bother creating a record for the user
	}
	// but if they DO have a record already...
	else {
		// just update it
		db_query("UPDATE {telemo_users} SET mobile_num = '%s', signups = '%s' WHERE id = %d", $mobile_num, $signups, $user_id);
	}
	
	// while we're here, do the next scheduled actions
	telemo_execute_next_scheduled_actions();
	
} // end function - telemo_user_settings_validate




/******************************************************/

/**
 *
 * Runs functions for all TeleMo features that require cron. To make use of,
 * after creating your external feature function (say, tm_sms_feature_example),
 * create a function for cron to call (in this case, tm_sms_feature_example_cron)
 *
 */
function telemo_cron() {

	// execute scheduled sends
	telemo_execute_next_scheduled_actions();

	// get the services
	$services = _telemo_all_services('rebuild');
	
	// loop through all the services
	foreach ($services as $service) {
	
		$funcname_prefix = 'tm_' . $service['id'] . '_feature_';
		
		// loop through all the features
		foreach ($service['features'] as $feature) {
			// execute the cron function, if any, for the feature
			$funcname = $funcname_prefix . $feature['id'] . '_cron';
			if (function_exists($funcname)) {
				call_user_func($funcname);
			}
		}

	}

}


/**
 * Returns the user IDs and mobile numbers of all users signed up for a specific feature
 */
function _telemo_get_signups_for_feature($service_id, $feature_id) {

	$signups = array();
	// all feature IDs in this field are prefixed by ':', and suffixed by ';'
	$tagged_id = ':' . $service_id . '~' . $feature_id . ';';
	$data = db_query("SELECT id, mobile_num FROM {telemo_users} WHERE signups LIKE '%%%s%%'", $tagged_id);
	while ($record = db_fetch_array($data)) {
		$signups[] = $record;
	}
	return $signups;

}


/**
 * Return a list of TeleMo services defined in the enabled modules.
 */
function _telemo_all_services($action = NULL) {
  static $telemo_services = array();

  if ((count($telemo_services) == 0) || ($action == 'rebuild')) {
	  $telemo_services = module_invoke_all('telemo_service');
	}
	
  return $telemo_services;
}


/**
 * Return only the enabled TeleMo services
 */
function _telemo_all_enabled_services() {

	$services = _telemo_all_services('rebuild');
	
	foreach ($services as $key => $service) {
		if (!$service['enabled']) {
			unset($services[$key]);
		}
	}
	
	return array_values($services);
}


/**
 * Given an array of arrays, and a key present in each of the subarrays,
 * returns the values of those subelements with the given key.
 */
function _telemo_array_subvalues($arr, $key) {

	$ret = array();
	foreach ($arr as $row) {
		$ret[] = $row[$key];
	}
	return $ret;
}
